// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

enum Role {
  Employee
  Admin
  Owner
  Manager
}

model User {
  pk_user_id String @id @map("pk_user_id") // Assuming this is a generated ID

  username String @unique
  email    String @unique

  password           String
  department_id      String?
  organize_id        String?
  pagination_id      Int      @unique @default(autoincrement()) @map("pagination_id")
  first_name         String?
  last_name          String?
  gender             Gender   @default(Male)
  role               Role     @default(Employee)
  introduction_brief String?
  image              String?
  total_credit       Int      @default(0)
  is_deleted         Boolean  @default(false)
  deleted_at         Int?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())

  KeyResult       KeyResult[]
  ObjectiveOnUser ObjectiveOnUser[]
  Organize        Organize[]
}

model Department {
  pk_department_id String  @id @unique
  organize_id      String
  manager_id       String?
  name             String  @unique

  organize              Organize                @relation(fields: [organize_id], references: [pk_organize_id])
  ObjectiveOnDepartment ObjectiveOnDepartment[]
}

model Organize {
  pk_organize_id String @id @unique
  owner_id       String
  name           String @unique
  address        String
  contact        String

  owner          User             @relation(fields: [owner_id], references: [pk_user_id])
  Department     Department[]
  Period         Period[]
  ObjectiveOnOrg ObjectiveOnOrg[]
}

model Objective {
  pk_objective_id       String                  @id @unique
  period_id             String
  period                Period                  @relation(fields: [period_id], references: [pk_period_id])
  obj_type              objective_type          @default(Other)
  name                  String
  description           String?
  target                String
  progress              Float?                  @default(0)
  status                Boolean                 @default(true)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  deadline              DateTime
  KeyResult             KeyResult[]
  ObjectiveOnDepartment ObjectiveOnDepartment[]
  ObjectiveOnUser       ObjectiveOnUser[]
  ObjectiveOnOrg        ObjectiveOnOrg[]
}

enum objective_type {
  Percent
  As_high_as_possible
  As_low_as_possible
  Kpi
  Other
}

model UserInformation {
  pk_user_id         String   @id @unique
  job_title          String?
  location           String?
  company            String?
  bio                String?
  job_type           String?
  year_of_experience Int?
  industry           String?
  birthday           BigInt?
  organization       String?
  education_level    String?
  education          String?
  social_link        String[]
}

model OAuthStateStorage {
  csrf_state         String @id @unique
  pkce_code_verifier String
}

model Notification {
  pk_notification_id String  @id @unique
  user_id            String
  message            String?
  status             Boolean @default(false)
}

model KeyResult {
  pk_kr_id String @id @map("pk_kr_id")

  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [pk_objective_id])

  name String

  description String

  target String

  progress Float @default(0)

  status Boolean @default(true)

  metric String

  deadline DateTime

  userId String
  user   User   @relation(fields: [userId], references: [pk_user_id])

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
}

model Period {
  pk_period_id String   @id @map("pk_period_id")
  organize_id  String
  name         String
  start_date   DateTime
  end_date     DateTime

  Objective Objective[]
  Organize  Organize    @relation(fields: [organize_id], references: [pk_organize_id])
}

model ObjectiveOnDepartment {
  id            String     @id @default(uuid())
  obj_id        String
  department_id String
  objective     Objective  @relation(fields: [obj_id], references: [pk_objective_id])
  department    Department @relation(fields: [department_id], references: [pk_department_id])

  @@unique([obj_id, department_id], map: "uc_obj_department")
  @@index([obj_id], map: "obj_departments_obj")
  @@index([department_id], map: "obj_departments_department")
}

model ObjectiveOnUser {
  id        String    @id @default(uuid())
  obj_id    String
  user_id   String
  objective Objective @relation(fields: [obj_id], references: [pk_objective_id])
  user      User      @relation(fields: [user_id], references: [pk_user_id])

  @@unique([obj_id, user_id], map: "uc_obj_user")
  @@index([obj_id], map: "obj_users_obj")
  @@index([user_id], map: "obj_users_user")
}

model ObjectiveOnOrg {
  id        String    @id @default(uuid())
  obj_id    String
  org_id    String
  objective Objective @relation(fields: [obj_id], references: [pk_objective_id])
  org       Organize  @relation(fields: [org_id], references: [pk_organize_id])

  @@unique([obj_id, org_id], map: "uc_obj_org")
  @@index([obj_id], map: "obj_orgs_obj")
  @@index([org_id], map: "obj_orgs_organize")
}
